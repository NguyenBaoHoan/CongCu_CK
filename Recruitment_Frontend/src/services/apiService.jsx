import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { useNotification } from '../hooks/useNotification';

/**
 * Axios instance
 * - withCredentials: true ‚Üí T·ª± ƒë·ªông g·ª≠i cookies (refresh_token)
 * - Kh√¥ng c·∫ßn Authorization header v√¨ s·∫Ω ƒë∆∞·ª£c th√™m ƒë·ªông
 */
const apiClient = axios.create({
  baseURL: 'http://localhost:8080/api/v1',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true, // ‚ö†Ô∏è Quan tr·ªçng: Cho ph√©p g·ª≠i/nh·∫≠n cookies
});

// Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u access token (trong memory, kh√¥ng ph·∫£i localStorage)
let accessToken = null;

/**
 * Set access token v√†o memory
 */
export const setAccessToken = (token) => {
  accessToken = token;
};

/**
 * Get access token t·ª´ memory
 */
export const getAccessToken = () => {
  return accessToken;
};

/**
 * Clear access token
 */
export const clearAccessToken = () => {
  accessToken = null;
};

/**
 * Request Interceptor
 * T·ª± ƒë·ªông th√™m access token v√†o header
 */
apiClient.interceptors.request.use(
  (config) => {
    // N·∫øu c√≥ access token, th√™m v√†o Authorization header
    if (accessToken) {
      config.headers.Authorization = `Bearer ${accessToken}`;
    }
    
    console.log('üöÄ Request:', config.method.toUpperCase(), config.url);
    return config;
  },
  (error) => {
    console.error('‚ùå Request Error:', error);
    return Promise.reject(error);
  }
);

/**
 * Response Interceptor
 * X·ª≠ l√Ω auto refresh token khi 401
 */
let isRefreshing = false;
let failedQueue = [];

const processQueue = (error, token = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  
  failedQueue = [];
};

apiClient.interceptors.response.use(
  (response) => {
    console.log('‚úÖ Response:', response.status, response.config.url);
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // Ki·ªÉm tra n·∫øu l√† l·ªói 401 v√† ch∆∞a retry
    if (
      error.response?.status === 401 && 
      !originalRequest._retry &&
      originalRequest.url !== '/auth/refresh' // Tr√°nh refresh token loop
    ) {
      // N·∫øu ƒëang refresh, th√™m request v√†o queue
      if (isRefreshing) {
        try {
          const token = await new Promise((resolve, reject) => {
            failedQueue.push({ resolve, reject });
          });
          originalRequest.headers.Authorization = `Bearer ${token}`;
          return apiClient(originalRequest);
        } catch (err) {
          return Promise.reject(err);
        }
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        // G·ªçi refresh token API v·ªõi timeout ng·∫Øn h∆°n
        const response = await axios.get('http://localhost:8080/api/v1/auth/refresh', {
          withCredentials: true,
          timeout: 5000 // Gi·∫£m timeout ƒë·ªÉ fail fast
        });

        const newAccessToken = response.data.access_token;
        if (!newAccessToken) {
          throw new Error('No access token received');
        }

        // L∆∞u token m·ªõi
        setAccessToken(newAccessToken);
        
        // X·ª≠ l√Ω queue
        processQueue(null, newAccessToken);
        
        // Retry request g·ªëc
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
        return apiClient(originalRequest);
        
      } catch (refreshError) {
        // X·ª≠ l√Ω l·ªói refresh token
        processQueue(refreshError, null);
        clearAccessToken();

        // N·∫øu refresh token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
        if (refreshError.response?.status === 401 || refreshError.response?.status === 403) {
          // Clear storage v√† redirect v·ªÅ login
          const { logout } = useAuth();
          const { showError } = useNotification();
          
          await logout(); // This will clear storage and auth context
          showError('Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
          window.location.href = '/login';
        } else {
          // C√°c l·ªói kh√°c (network, server, etc)
          console.error('Refresh token error:', refreshError);
          const { showError } = useNotification();
          showError('C√≥ l·ªói x·∫£y ra khi l√†m m·ªõi phi√™n l√†m vi·ªác. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
          window.location.href = '/login';
        }
        
        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }

    // X·ª≠ l√Ω c√°c l·ªói kh√¥ng ph·∫£i 401
    console.error('‚ùå Response Error:', {
      status: error.response?.status,
      url: error.config?.url,
      message: error.response?.data?.message || error.message
    });

    // Tr·∫£ v·ªÅ error message t·ª´ server ho·∫∑c default message
    const errorMessage = error.response?.data?.message || error.message || 'Something went wrong';
    return Promise.reject(new Error(errorMessage));
  }
);

export { apiClient };